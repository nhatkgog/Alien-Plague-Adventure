# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Unity CI + Code Quality

on:
  push:
  pull_request:
    branches:
      - main

jobs:
  unity:
    name: Unity setup, activate, test & build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: ~/.cache/unity3d
          key: Unity6-${{ runner.os }}-${{ hashFiles('**/ProjectSettings/ProjectVersion.txt') }}

      - name: Setup Unity
        uses: game-ci/unity-actions/setup@v2
        with:
          unityVersion: 6000.1.2f1

      - name: Activate Unity License
        uses: game-ci/unity-actions/activate@v2
        with:
          unityVersion: 6000.1.2f1

      - name: Run Unity Tests
        uses: game-ci/unity-actions/test@v2
        with:
          unityVersion: 6000.1.2f1

      - name: Build Standalone
        uses: game-ci/unity-actions/build@v2
        with:
          unityVersion: 6000.1.2f1
          targetPlatform: StandaloneWindows64

  roslyn_dotnet:
    name: C# Roslyn + Format
    runs-on: ubuntu-latest
    needs: unity
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - run: dotnet restore

      - name: Run Roslyn analyzers
        run: dotnet build --no-restore -warnaserror

      - name: Check formatting
        uses: xt0rted/dotnet-format@v1.2.0
        with:
          only-changed-files: true
        env:
          DOTNET_ROOT: /usr/share/dotnet

  mega_linter:
    name: Mega-Linter (C#, YAML, MD)
    runs-on: ubuntu-latest
    needs: roslyn_dotnet
    steps:
      - uses: actions/checkout@v3

      - name: Run Mega-Linter
         uses: oxsecurity/megalinter@v8
         env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          linter: 'CSHARP,YAML,MARKDOWN'
